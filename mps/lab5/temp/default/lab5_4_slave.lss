
lab5_4_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000005c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000000b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000097  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000813  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000a5  00000000  00000000  0000084e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000068  00000000  00000000  000008f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000011d  00000000  00000000  0000095b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000008d  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000b25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	13 c0       	rjmp	.+38     	; 0x58 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
  // „астота 1 ћ√ц
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void) {
    DDRD &= ~(1 << PD2);  // PD2 Ч кнопка (вход)
  34:	8a 98       	cbi	0x11, 2	; 17
    PORTD |= (1 << PD2);  // ѕодт€гивающий резистор
  36:	92 9a       	sbi	0x12, 2	; 18

    DDRA |= ~0;   // PD3 Ч выход на светодиод
  38:	8a b3       	in	r24, 0x1a	; 26
  3a:	8f ef       	ldi	r24, 0xFF	; 255
  3c:	8a bb       	out	0x1a, r24	; 26
    PORTA |= 0; // ¬ыключить светодиод
  3e:	8b b3       	in	r24, 0x1b	; 27
  40:	8b bb       	out	0x1b, r24	; 27

    while (1) {
        if (!(PIND & (1 << PD2))) {  //  нопка нажата
  42:	82 99       	sbic	0x10, 2	; 16
  44:	fe cf       	rjmp	.-4      	; 0x42 <__SREG__+0x3>
        	TCNT0 = 0; // сброс таймера
  46:	12 be       	out	0x32, r1	; 50
	    	TCCR0 |= (1 << CS00 | 1 << CS00); // включение таймера с прескейлом 1024, 1 ћ√ц / 1024 = 1 к√ц (1 мс)
  48:	83 b7       	in	r24, 0x33	; 51
  4a:	81 60       	ori	r24, 0x01	; 1
  4c:	83 bf       	out	0x33, r24	; 51
            while (!(PIND & (1 << PD2)));
  4e:	82 9b       	sbis	0x10, 2	; 16
  50:	fe cf       	rjmp	.-4      	; 0x4e <__SREG__+0xf>
	    	TCCR0 = 0;
  52:	13 be       	out	0x33, r1	; 51
	    	char temp = TCNT0;
  54:	82 b7       	in	r24, 0x32	; 50
  56:	f4 cf       	rjmp	.-24     	; 0x40 <__SREG__+0x1>

00000058 <_exit>:
  58:	f8 94       	cli

0000005a <__stop_program>:
  5a:	ff cf       	rjmp	.-2      	; 0x5a <__stop_program>
