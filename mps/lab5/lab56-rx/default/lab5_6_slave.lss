
lab5_6_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000142  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800066  00800066  000001dc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  0000093f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000055  00000000  00000000  0000095f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000117  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000a6  00000000  00000000  00000acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000017d  00000000  00000000  00000b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000030  00000000  00000000  00000cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000b2  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000013  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000001e  00000000  00000000  00000de5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__vector_8>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e2 e4       	ldi	r30, 0x42	; 66
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a6 36       	cpi	r26, 0x66	; 102
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a6 e6       	ldi	r26, 0x66	; 102
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a8 36       	cpi	r26, 0x68	; 104
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	2e d0       	rcall	.+92     	; 0xb2 <main>
  56:	73 c0       	rjmp	.+230    	; 0x13e <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <__vector_8>:
uint8_t receivedBytes = 0;
uint8_t currentByte = 0;

#define START_SYM 0xAA

ISR(SPI_STC_vect) {
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
  64:	2f 93       	push	r18
  66:	8f 93       	push	r24
  68:	9f 93       	push	r25
  6a:	ef 93       	push	r30
  6c:	ff 93       	push	r31
    unsigned char incomingByte = SPDR;
  6e:	9f b1       	in	r25, 0x0f	; 15

    if (incomingByte == START_SYM) {
  70:	9a 3a       	cpi	r25, 0xAA	; 170
  72:	21 f4       	brne	.+8      	; 0x7c <__vector_8+0x22>
        SPDR = data[0];
  74:	80 91 60 00 	lds	r24, 0x0060
  78:	8f b9       	out	0x0f, r24	; 15
  7a:	11 c0       	rjmp	.+34     	; 0x9e <__vector_8+0x44>
    } else if (receivedBytes < DATA_LENGTH) {
  7c:	80 91 66 00 	lds	r24, 0x0066
  80:	85 30       	cpi	r24, 0x05	; 5
  82:	68 f4       	brcc	.+26     	; 0x9e <__vector_8+0x44>
        SPDR = data[receivedBytes + 1]; 
  84:	e8 2f       	mov	r30, r24
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	e0 5a       	subi	r30, 0xA0	; 160
  8a:	ff 4f       	sbci	r31, 0xFF	; 255
  8c:	21 81       	ldd	r18, Z+1	; 0x01
  8e:	2f b9       	out	0x0f, r18	; 15
        data[receivedBytes] = incomingByte;
  90:	90 83       	st	Z, r25
        receivedBytes++;
  92:	8f 5f       	subi	r24, 0xFF	; 255
  94:	80 93 66 00 	sts	0x0066, r24

        if (receivedBytes == DATA_LENGTH) {
  98:	85 30       	cpi	r24, 0x05	; 5
  9a:	09 f4       	brne	.+2      	; 0x9e <__vector_8+0x44>
            PORTC = 0x00;
  9c:	15 ba       	out	0x15, r1	; 21
        }
    }
}
  9e:	ff 91       	pop	r31
  a0:	ef 91       	pop	r30
  a2:	9f 91       	pop	r25
  a4:	8f 91       	pop	r24
  a6:	2f 91       	pop	r18
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <main>:

int main() {
    SPCR = (1 << SPE) | (1 << SPIE) | (1 << CPHA) | (1 << DORD);
  b2:	84 ee       	ldi	r24, 0xE4	; 228
  b4:	8d b9       	out	0x0d, r24	; 13

    DDRB = (1 << PIN_MISO);
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	87 bb       	out	0x17, r24	; 23
    PORTE = (1 << BUTTON_SHOW);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	87 b9       	out	0x07, r24	; 7
    DDRC = 0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	84 bb       	out	0x14, r24	; 20
    PORTC = 0xFF;
  c2:	85 bb       	out	0x15, r24	; 21

    sei();
  c4:	78 94       	sei
    while (1) {
        if (!(PINE & (1 << BUTTON_SHOW))) {
            while (!(PINE & (1 << BUTTON_SHOW)))
                ;
            PORTC = ~data[currentByte];
            currentByte = (currentByte + 1) % DATA_LENGTH;
  c6:	25 e0       	ldi	r18, 0x05	; 5
  c8:	30 e0       	ldi	r19, 0x00	; 0
    PORTC = 0xFF;

    sei();

    while (1) {
        if (!(PINE & (1 << BUTTON_SHOW))) {
  ca:	28 99       	sbic	0x05, 0	; 5
  cc:	fe cf       	rjmp	.-4      	; 0xca <main+0x18>
            while (!(PINE & (1 << BUTTON_SHOW)))
  ce:	28 9b       	sbis	0x05, 0	; 5
  d0:	fe cf       	rjmp	.-4      	; 0xce <main+0x1c>
                ;
            PORTC = ~data[currentByte];
  d2:	80 91 67 00 	lds	r24, 0x0067
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	e0 5a       	subi	r30, 0xA0	; 160
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	40 81       	ld	r20, Z
  e0:	40 95       	com	r20
  e2:	45 bb       	out	0x15, r20	; 21
            currentByte = (currentByte + 1) % DATA_LENGTH;
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	b9 01       	movw	r22, r18
  e8:	03 d0       	rcall	.+6      	; 0xf0 <__divmodhi4>
  ea:	80 93 67 00 	sts	0x0067, r24
  ee:	ed cf       	rjmp	.-38     	; 0xca <main+0x18>

000000f0 <__divmodhi4>:
  f0:	97 fb       	bst	r25, 7
  f2:	09 2e       	mov	r0, r25
  f4:	07 26       	eor	r0, r23
  f6:	0a d0       	rcall	.+20     	; 0x10c <__divmodhi4_neg1>
  f8:	77 fd       	sbrc	r23, 7
  fa:	04 d0       	rcall	.+8      	; 0x104 <__divmodhi4_neg2>
  fc:	0c d0       	rcall	.+24     	; 0x116 <__udivmodhi4>
  fe:	06 d0       	rcall	.+12     	; 0x10c <__divmodhi4_neg1>
 100:	00 20       	and	r0, r0
 102:	1a f4       	brpl	.+6      	; 0x10a <__divmodhi4_exit>

00000104 <__divmodhi4_neg2>:
 104:	70 95       	com	r23
 106:	61 95       	neg	r22
 108:	7f 4f       	sbci	r23, 0xFF	; 255

0000010a <__divmodhi4_exit>:
 10a:	08 95       	ret

0000010c <__divmodhi4_neg1>:
 10c:	f6 f7       	brtc	.-4      	; 0x10a <__divmodhi4_exit>
 10e:	90 95       	com	r25
 110:	81 95       	neg	r24
 112:	9f 4f       	sbci	r25, 0xFF	; 255
 114:	08 95       	ret

00000116 <__udivmodhi4>:
 116:	aa 1b       	sub	r26, r26
 118:	bb 1b       	sub	r27, r27
 11a:	51 e1       	ldi	r21, 0x11	; 17
 11c:	07 c0       	rjmp	.+14     	; 0x12c <__udivmodhi4_ep>

0000011e <__udivmodhi4_loop>:
 11e:	aa 1f       	adc	r26, r26
 120:	bb 1f       	adc	r27, r27
 122:	a6 17       	cp	r26, r22
 124:	b7 07       	cpc	r27, r23
 126:	10 f0       	brcs	.+4      	; 0x12c <__udivmodhi4_ep>
 128:	a6 1b       	sub	r26, r22
 12a:	b7 0b       	sbc	r27, r23

0000012c <__udivmodhi4_ep>:
 12c:	88 1f       	adc	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	5a 95       	dec	r21
 132:	a9 f7       	brne	.-22     	; 0x11e <__udivmodhi4_loop>
 134:	80 95       	com	r24
 136:	90 95       	com	r25
 138:	bc 01       	movw	r22, r24
 13a:	cd 01       	movw	r24, r26
 13c:	08 95       	ret

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
